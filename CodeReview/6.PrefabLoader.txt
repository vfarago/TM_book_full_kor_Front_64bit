개요
ㄴ AnimalDataSetLoader로 만들어진 타겟들이 잡힐 때 저장되어있는 prefab을 불러와 붙혀주는 스크립트

===================================================================================

1. 변수

arManager(ARManager)		//ARManager 클래스
prefabShelter(PrefabShelter)		//PrefabShelter 클래스

phoModel(GameObject)		//파닉스용 모델
m3dModel(GameObject)		//3D모델
phonics(GameObject)		//파닉스 모델
dataSet(GameObject)		//데이타셋
arCamera(Camera)			//AR카메라
isEndAR(bool)			//AR기능 onoff
isTargetoff = false(bool)		//타겟이 꺼져있는가 (초기값 거짓)

backRotY(float)			//로테이션의 Y값 저장하는 용도
m3dModelDepth = 700f (float)		//모델링의 깊이(?)
m3dModelRot(Vector3)		//모델링의 로테이션

===================================================================================

2. void Awake()
    {
        //ARManager를 복사하여 선언
        arManager = ARManager.Instance;
        //PrefabShelter컴포넌트가 붙은 오브젝트를 찾아서 선언
        prefabShelter = FindObjectOfType<PrefabShelter>();
        //AnimalDataSetLoader를 찾아서 선언
        dataSet = GameObject.Find("AnimalDataSetLoader");
    }

===================================================================================

3. void ChangePrefab(string name, bool isFreeModel)
    {
        //isEndAR의 값을 참으로
        isEndAR = true;
        //RoadPrefab 함수에 name과 isFreeModel를 넣어 코루틴으로 실행
        StartCoroutine(RoadPrefab(name, isFreeModel));
        
        //DestroyObj 함수를 실행
        DestroyObj();
    }

===================================================================================

4. IEnumerator RoadPrefab(string targetName, bool isFreeModel)
    {
        //ObjectHolder 오브젝트를 찾아서 선언
        GameObject objectHolder = GameObject.Find("ObjectHolder");
        //objectHolder의 로테이션을 0,0,0,0으로 / 로컬스케일을 1,1,1로 선언
        objectHolder.transform.rotation = new Quaternion(0, 0, 0, 0);
        objectHolder.transform.localScale = new Vector3(1, 1, 1);

        //isFreeModel의 값이 참일 경우(맛보기 모델의 겨우)
        if (isFreeModel)
        {
            //go는 아래와 같이 선언
            GameObject go = Resources.Load<GameObject>(string.Format("objects/{0}", targetName));
            //phoModel은 아래와 같이 선언
            phoModel = Instantiate(go, objectHolder.transform, false);
        }
        //isFreeModel의 값이 거짓일 경우(그외 모델의 겨우)
        else
        {
            //prefabShelter의 tmModel의 길이만큼 반복
            for (int i = 0; i < prefabShelter.tmModel.Length; i++)
            {
                //prefabShelter의 i번째 tmModel이 null이 아니면서 prefabShelter의 i번째 tmModel의 모델이 null이 아닐 경우
                if (prefabShelter.tmModel[i] != null && prefabShelter.tmModel[i].model != null)
                {
                    //prefabShelter의 i번째 tmModel의 모델의 이름이 targetName과 같을 경우
                    if (prefabShelter.tmModel[i].model.name.Equals(targetName))
                    {
                        //phoModel을 아래와 같이 선언하여 반복문 탈출
                        phoModel = Instantiate(prefabShelter.tmModel[i].model, objectHolder.transform, false);
                        break;
                    }
                }
            }
        }

        //phoModel의 이름을 targetName으로 설정하고, 태그를 Phonics로 설정
        phoModel.name = targetName;
        phoModel.tag = "Phonics";

        //phoModel 내부에 MeshRenderer가 존재 할 경우 
        if (phoModel.GetComponentInChildren<MeshRenderer>())
        {
            //phoModel의 로테이션을 다음과 같이 설정
            phoModel.transform.Rotate(0, -90, -90, Space.World); // 일반사물
        }
        //phoModel 내부에 MeshRenderer가 존재 하지 않을 경우
        else
        {
            //phoModel의 로테이션을 다음과 같이 설정
            phoModel.transform.Rotate(-50, -90, -90, Space.World); // 동물
        }
        //phoModel의 로컬스케일의 xyz값 모두 0.3f로 설정
        phoModel.transform.localScale = new Vector3(0.3f, 0.3f, 0.3f);

        //phoModel의 설정이 끝날 때 까지 기다렸다 리턴
        yield return phoModel;

        //쓰이지 않거나 로드되지 않은 에셋들을 정리
        Resources.UnloadUnusedAssets();

        //phonics를 아래의 값을 넣어서 클론을 만들어 정의한다
        phonics = Instantiate(Resources.Load<GameObject>("prefabs/Phonics"), GameObject.Find("ARPanel").transform, false);
        //phonics에 포함되어있는 Phonics의 타겟이름을 targetName로, isFreemodel의 값을 isFreeModel로 설정
        phonics.GetComponentInChildren<Phonics>().targetName = targetName;
        phonics.GetComponentInChildren<Phonics>().isFreeModel = isFreeModel;
    }

===================================================================================

5. void TargetOffMoving(GameObject go)
    {
        //m3dModel을 go로 선언
        m3dModel = go;
        //m3dModel의 태그를 targetOff로 설정
        m3dModel.tag = "targetOff";
        //RespositionAugmentation 함수에 0.5f를 넣어 코루틴으로 실행
        StartCoroutine(RepositionAugmentation(0.5f));
        //AllKill 함수를 실행
        AllKill();

        //로드되지 않았거나 쓰이지 않는 에셋들을 정리
        Resources.UnloadUnusedAssets();
    }

===================================================================================

//터치 후 포지션 변경
6. private IEnumerator RepositionAugmentation(float time)
    {
        //m3dModel의 부모를 arCamera쪽으로 변경
        m3dModel.transform.parent = arCamera.transform;
        //isTargetoff의 값을 참으로
        isTargetoff = true;

        //m3dModel의 BoxCollider를 가져와서 활성화 시킴
        m3dModel.GetComponent<BoxCollider>().enabled = true;

        //m3dModel의 하위항목이 MeshRenderer를 가지고 있을 경우
        if (m3dModel.GetComponentInChildren<MeshRenderer>())
        {
            //m3dModel의 하위항목의 MeshRenderer를 활성화 시키고 backRotY의 값을 -90f로 설정
            m3dModel.GetComponentInChildren<MeshRenderer>().enabled = true;
            backRotY = -90f;
        }
        //m3dModel의 하위항목이 MeshRenderer를 가지고 있지 않을 경우
        else
        {
            //m3dModel의 하위항목의 SkinnedMeshRenderer를 활성화 시키고 backRotY의 값을 -140f로 설정
            m3dModel.GetComponentInChildren<SkinnedMeshRenderer>().enabled = true;
            backRotY = -140f;
        }

        //set the initialScale
        //float initialScale = m3dModel.transform.localScale.x;
        //initialScale의 값을 100f로 설정
        float initialScale = 100f;

        //position
        Vector3 startPosition = m3dModel.transform.localPosition;
        Vector3 newPosition = new Vector3(0, 0, m3dModelDepth);

        //rotation 
        //startRotation의 값을 아래와 같이 설정
        Vector3 startRotation = m3dModel.transform.localEulerAngles;
        //newRotation의 값을 RotValue함수를 실행시켜 리턴받는 값으로 설정
        Vector3 newRotation = RotValue();

        //scaling
        //startScaling과 newScaling의 값을 아래와 같이 설정
        Vector3 startScaling = m3dModel.transform.localScale;
        Vector3 newScaling = new Vector3(initialScale, initialScale, initialScale);

        //Object Reflect
        //arManager의 isFrontCamera의 값이 참일 경우 스케일링을 아래와 같이 조절
        if (arManager.isFrontCamera)
            newScaling = new Vector3(initialScale, initialScale, initialScale * -1f);

        //lerping
        //elapsedTime의 값을 0으로 선언
        float elapsedTime = 0;
        //elapsedTime의 값이 time보다 작을 때 동안 반복한다
        while (elapsedTime < time)
        {
            //m3dModel의 로컬포지션을 아래와 같이 설정
            m3dModel.transform.localPosition = Vector3.Lerp(startPosition, newPosition, (elapsedTime / time));
            //m3dModel의 가도를 아래와 같이 설정
            m3dModel.transform.localEulerAngles = Vector3.Lerp(startRotation, newRotation, (elapsedTime / time));
            //m3dModel의 로컬스케일을 아래와 같이 설정
            m3dModel.transform.localScale = Vector3.Lerp(startScaling, newScaling, (elapsedTime / time));
            //elapsedTime의 값에 Time.deltaTime를 더함
            elapsedTime += Time.deltaTime;
            yield return null;
        }
        //m3dModel의 로컬포지션을 newPosition의 값으로, 각도를 newRotation으로 설정
        m3dModel.transform.localPosition = newPosition;
        m3dModel.transform.localEulerAngles = newRotation;

        //m3dModel이 완료될 때 까지 기다렸다 리턴
        yield return m3dModel;
    }

===================================================================================

//카메라의 전/후 전환에 따라 오브젝트 180도 회전
7. Vector3 RotValue()
    {
        if (arManager.isFrontCamera)
        {
            m3dModelRot = new Vector3(180, backRotY, 0);
        }
        else
        {
            m3dModelRot = new Vector3(0, backRotY, 0);
        }
        return m3dModelRot;
    }

===================================================================================

//카메라 전/후 전환에 따라 오브젝트 좌우반전
8. void ModelChangePos()
    {
        //Object Reflect
        m3dModel.transform.localScale = new Vector3(m3dModel.transform.localScale.x, m3dModel.transform.localScale.y, m3dModel.transform.localScale.z * -1f);

        m3dModel.transform.localEulerAngles = RotValue();
    }

===================================================================================

//go의 길이만큼 반복문을 돌려 go의 모든 isModelLoading의 값을 거짓으로 바꾼다
9. void ModelFalse()
    {
        DynamicTrackableEventHandler[] dteh = dataSet.GetComponentsInChildren<DynamicTrackableEventHandler>();
        foreach (DynamicTrackableEventHandler go in dteh)
        {
            go.isModelLoading = false;
        }
    }

===================================================================================

//m3dModel을 Destroy시킨 후 isTargetoff의 값을 참으로 반환한다
10. bool DestroyObj()
    {
        Destroy(m3dModel);

        return isTargetoff = false;
    }

===================================================================================

//augmentation이라는 태그를 가진 오브젝트를 찾아 모두 없앤다
11. void AllKill()
    {
        GameObject[] gobj = GameObject.FindGameObjectsWithTag("augmentation");
        foreach (GameObject go in gobj)
            Destroy(go);
    }

===================================================================================

//프리팹을 파괴시키는 함수
12. void DestroyPrefab()
    {
        //코루틴을 모두 정지시킨 후 phoModel을 파괴하여 null로 설정한다
        StopAllCoroutines();
        Destroy(phoModel);
        phoModel = null;
        //phonics를 파괴하여 null로 설정시킨다.
        Destroy(phonics);
        phonics = null;
    }